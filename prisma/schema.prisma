// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String    @id @default(uuid())
  username   String?   @unique
  email      String    @unique
  password   String
  isVerified Boolean   @default(false)
  role       Role      @default(USER)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  Repo       Repo[]
  Bookmark   Bookmark?
}

model Verification {
  id        String   @id @default(uuid())
  token     String   @unique
  createdAt DateTime @default(now())
  userId    String   @unique
}

model ResetPassword {
  id        String   @id @default(uuid())
  token     String   @unique
  createdAt DateTime @default(now())
  userId    String   @unique
}

enum Role {
  USER
  ADMIN
}

model Repo {
  id          String   @id @default(uuid())
  name        String
  description String
  isPublic    Boolean  @default(false)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  tags        Tag[]
  files       File[]
  bookmarked  Boolean  @default(false)
}

model File {
  id         String @id @default(uuid())
  name       String
  publicName String
  urlLink    String
  repo       Repo   @relation(fields: [repoId], references: [id])
  repoId     String
}

model Tag {
  name   String @id
  Repo   Repo   @relation(fields: [repoId], references: [id])
  repoId String
}

model Bookmark {
  id      String   @id @default(uuid())
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  String   @unique
  repoIds String[]
}
